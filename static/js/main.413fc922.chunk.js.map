{"version":3,"sources":["components/person/Person.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Person","person","isHuman","isDroid","className","name","height","mass","gender","getAllPeople","a","people","axios","get","res","data","results","numPages","Math","ceil","count","promises","i","push","Promise","all","forEach","App","state","originalOrder","humanLink","droidLink","isLoading","lowerLimit","upperLimit","filteredPeople","noFilterMatches","sortingOrder","human","droid","initialState","url","this","setState","key","species","indexOf","e","target","value","toLowerCase","sorted","sort","b","nameA","nameB","lengthRoundedDown","floor","length","peopleToDisplay","filter","map","personElement","slice","type","placeholder","onChange","handleFilterChange","bind","handleSortingChange","onClick","decreaseLimit","increaseLimit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.413fc922.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.scss';\nimport PersonModel from '../../models/Person';\n\ninterface Props {\n  person: PersonModel; // Person object\n  isHuman: boolean; // Boolean for checking if person is a human\n  isDroid: boolean; // Boolean for checking if person is a droid\n}\n\nconst Person: React.FunctionComponent<Props> = ({\n  person,\n  isHuman,\n  isDroid\n}) => {\n  return (\n    <div className=\"person\">\n      <div className=\"icon\">\n        {isHuman && <i className=\"fa fa-user-circle-o\"></i>}\n        {isDroid && <i className=\"fa fa-android\"></i>}\n        {!isHuman && !isDroid && <i className=\"fa fa-question-circle\"></i>}\n      </div>\n      <div className=\"information\">\n        <div className=\"name\">\n          <h1>{person.name}</h1>\n        </div>\n        <div className=\"stats\">\n          <p>\n            <strong>Height:</strong> {person.height}\n          </p>\n          <p>\n            <strong>Mass:</strong> {person.mass}\n          </p>\n          <p>\n            <strong>Gender:</strong> {person.gender}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from 'react';\n\n// Libraries\nimport axios from 'axios';\n\n// components\nimport Person from '../person/Person';\n\n// models\nimport PersonModel from '../../models/Person';\n\n// Styles\nimport './App.scss';\n\n// Interface for initial state\ninterface State {\n  people: PersonModel[]; // Array of all people in the database\n  originalOrder: PersonModel[]; // Preserve the original order of the people\n  humanLink: string; // Link to check if person is human\n  droidLink: string; // Link to check if person is a droid\n  isLoading: boolean; // isLoading flag\n  lowerLimit: number; // Lower limit for pagination\n  upperLimit: number; // Upper Limit for pagination\n  filteredPeople: string; // String for filtering people\n  noFilterMatches: boolean; // Flag if there are no filtered matches\n  sortingOrder: string; // Selected sorting order\n}\n\n/**\n * Get all the people from the api at once\n */\nasync function getAllPeople(): Promise<PersonModel[]> {\n  let people: PersonModel[] = [];\n\n  // Get the first page of data\n  const res = await axios.get('https://swapi.co/api/people/');\n  people = res.data.results;\n  // Get the number of pages left in the api\n  const numPages = Math.ceil((res.data.count - 1) / 10);\n  // Set up the Promise.all array to get the rest of the pages at once\n  let promises = [];\n  for (let i = 2; i <= numPages; i++) {\n    promises.push(axios.get(`https://swapi.co/api/people?page=${i}`));\n  }\n  const promiseResults = await Promise.all(promises);\n  promiseResults.forEach(res => {\n    people = [...people, ...res.data.results];\n  });\n\n  return people;\n}\n\nexport default class App extends React.Component<{}, State> {\n  // Initialize state\n  state: State = {\n    people: [],\n    originalOrder: [],\n    humanLink: '',\n    droidLink: '',\n    isLoading: true,\n    lowerLimit: 0,\n    upperLimit: 10,\n    filteredPeople: '',\n    noFilterMatches: false,\n    sortingOrder: ''\n  };\n  async componentDidMount() {\n    // Get API data\n    const people = await getAllPeople();\n    const human = await axios.get(`https://swapi.co/api/species?search=Human`);\n    const droid = await axios.get(`https://swapi.co/api/species?search=Droid`);\n\n    // Set the initial state after loading the api data\n    const initialState = {\n      people,\n      originalOrder: people,\n      humanLink: human.data.results[0].url,\n      droidLink: droid.data.results[0].url,\n      isLoading: false\n    };\n\n    this.setState(initialState);\n  }\n\n  /**\n   * Function that takes in a person and builds a Person component with the passed in data\n   * @param person\n   */\n  private personElement(person: PersonModel) {\n    return (\n      <Person\n        key={person.name}\n        person={person}\n        isHuman={person.species.indexOf(this.state.humanLink) !== -1}\n        isDroid={person.species.indexOf(this.state.droidLink) !== -1}\n      ></Person>\n    );\n  }\n\n  /**\n   * Handles filtering people from the search bar\n   * @param e event\n   */\n  private handleFilterChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    // Set the filteredPeople state to the current input\n    this.setState({ filteredPeople: e.target.value.toLowerCase() });\n  }\n\n  /**\n   * Handles sorting of the people array when changed\n   * @param e event\n   */\n  private handleSortingChange(e: React.ChangeEvent<HTMLSelectElement>): void {\n    let sorted;\n    // If set to ascending, sort people by name in ascending order\n    if (e.target.value === 'ascending') {\n      sorted = [...this.state.people].sort(\n        (a: PersonModel, b: PersonModel): number => {\n          const nameA = a.name.toLowerCase();\n          const nameB = b.name.toLowerCase();\n          if (nameA < nameB) {\n            return -1;\n          }\n          if (nameA > nameB) {\n            return 1;\n          }\n          return 0;\n        }\n      );\n      // If set to descending, sort people by name in desscending order\n    } else if (e.target.value === 'descending') {\n      sorted = [...this.state.people].sort(\n        (a: PersonModel, b: PersonModel): number => {\n          const nameA = a.name.toLowerCase();\n          const nameB = b.name.toLowerCase();\n          if (nameA > nameB) {\n            return -1;\n          }\n          if (nameA < nameB) {\n            return 1;\n          }\n          return 0;\n        }\n      );\n      // If set back to the default option set the people back to their original order\n    } else {\n      sorted = this.state.originalOrder;\n    }\n\n    // Set the people state to the current sorted array value\n    this.setState({ people: sorted });\n  }\n\n  /**\n   * Decreases the limit of the currently shown people\n   */\n  private decreaseLimit(): void {\n    let upperLimit;\n\n    // If the length is an odd number we need to round down to the nearest 10\n    const lengthRoundedDown = Math.floor(this.state.people.length / 10) * 10;\n\n    // Set the upper limit to the length rounded down if the upper limit is greater\n    if (this.state.upperLimit > lengthRoundedDown) {\n      upperLimit = lengthRoundedDown;\n    } else {\n      // Else decrease the upper limit by 10 since we're only showing 10 people at a time\n      upperLimit = this.state.upperLimit - 10;\n    }\n    // Set the lower limit to 10 less than the upper limit\n    const lowerLimit = upperLimit - 10;\n\n    this.setState({ upperLimit, lowerLimit });\n  }\n\n  /**\n   * Increases the limit of the currently shown people\n   */\n  private increaseLimit(): void {\n    // Set the new lower limit to the current upper limit\n    const lowerLimit = this.state.upperLimit;\n    // Increase the upper limit by 10\n    let upperLimit = this.state.upperLimit + 10;\n    // If we've gone past the length of the array set the upper limit to the array length\n    if (upperLimit > this.state.people.length) {\n      upperLimit = this.state.people.length;\n    }\n\n    this.setState({ upperLimit, lowerLimit });\n  }\n\n  render() {\n    // If we're still loading data show the spinner\n    if (this.state.isLoading) {\n      return (\n        <div className=\"is-loading\">\n          <i className=\"fa fa-spinner fa-spin fa-5x fa-fw\"></i>\n        </div>\n      );\n    }\n\n    // Current people to display on the screen\n    let peopleToDisplay;\n    // If we're filtering, filter for people with names that have indexOf(searchPhrase)\n    if (this.state.filteredPeople) {\n      peopleToDisplay = this.state.people\n        .filter(person => {\n          if (\n            person.name.toLowerCase().indexOf(this.state.filteredPeople) > -1\n          ) {\n            return person;\n          }\n        })\n        .map(person => this.personElement(person));\n    } else {\n      // Else display all people\n      peopleToDisplay = this.state.people\n        // Slice the people array by the current upper and lower limit for pagination\n        .slice(this.state.lowerLimit, this.state.upperLimit)\n        .map(person => this.personElement(person));\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"heading\">\n          <h1>People of Star Wars</h1>\n        </div>\n        <div className=\"controls\">\n          <div className=\"search\">\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              onChange={this.handleFilterChange.bind(this)}\n            />\n\n            <span>\n              <i className=\"fa fa-search\"></i>\n            </span>\n          </div>\n\n          <div className=\"sort\">\n            <select\n              className=\"select-list\"\n              onChange={this.handleSortingChange.bind(this)}\n            >\n              <option value=\"none\">Select Sorting</option>\n              <option value=\"ascending\">Sort By Name (A-Z)</option>\n              <option value=\"descending\">Sort By Name (Z-A)</option>\n            </select>\n          </div>\n        </div>\n\n        {!peopleToDisplay.length && (\n          <div className=\"no-matches\">\n            <div className=\"icon\">\n              <i className=\"fa fa-exclamation-circle fa-5x\"></i>\n            </div>\n            <div className=\"message\">\n              <p>There aren't any matches for your search.</p>\n            </div>\n          </div>\n        )}\n\n        <div className=\"people\">{peopleToDisplay}</div>\n\n        <div className=\"pagination\">\n          <div className=\"back-button\">\n            {this.state.lowerLimit !== 0 ? (\n              <button\n                className=\"button\"\n                onClick={this.decreaseLimit.bind(this)}\n              >\n                Previous Page\n              </button>\n            ) : null}\n          </div>\n          <div className=\"current-page\">\n            <p>\n              {this.state.upperLimit} of {this.state.people.length}\n            </p>\n          </div>\n          <div className=\"next-button\">\n            {this.state.people.length !== this.state.upperLimit ? (\n              <button\n                className=\"button\"\n                onClick={this.increaseLimit.bind(this)}\n              >\n                Next Page\n              </button>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}